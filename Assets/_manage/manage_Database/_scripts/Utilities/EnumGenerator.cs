#if UNITY_EDITOR
using UnityEngine;
using System.Collections.Generic;
using System.IO;

namespace Antura.Database.Management
{
    /// <summary>
    /// Utility class that generates enumerators and writes them to C# scripts.
    /// </summary>
    public static class EnumGenerator
    {

        public static void ExtractEnum(string className, string columnKey, List<Dictionary<string, object>> tuples_list, bool addNoneValue = false, string customEnumName = null, string valueColumnKey = null)
        {

            List<string> enumValuesSet = new List<string>();
            List<int> numberValuesSet = new List<int>();
            foreach (var tuple in tuples_list)
            {
                var value = ((string)tuple[columnKey]).Trim();
                if (value == "")
                    continue;
                if (!enumValuesSet.Contains(value))
                {
                    enumValuesSet.Add(value);
                    if (valueColumnKey != null)
                        numberValuesSet.Add(int.Parse((string)tuple[valueColumnKey]));
                }
            }

            var enumName = className + columnKey;
            if (customEnumName != null)
            {
                enumName = customEnumName;
            }

            var path = Application.dataPath + "/_core/_scripts/Database/DataEnums/" + enumName + ".cs";
            WriteEnumFile(path, enumName, enumValuesSet, addNoneValue, numberValuesSet);
        }

        private static void WriteEnumFile(string toPath, string enumName, List<string> enumValues, bool addNoneValue, List<int> numberValuesSet)
        {
            using (StreamWriter sw = File.CreateText(toPath))
            {
                sw.WriteLine("//-------START OF AUTOGENERATED FILE - DO NOT EDIT------");
                sw.WriteLine("");
                sw.WriteLine("namespace Antura.Database");
                sw.WriteLine("{");
                sw.WriteLine("  public enum " + enumName);
                sw.WriteLine("  {");
                if (addNoneValue)
                {
                    sw.WriteLine("      None" + " = " + (0) + ",");
                }
                for (int i = 0; i < enumValues.Count; i++)
                {
                    if (numberValuesSet.Count > 0)
                    {
                        sw.WriteLine($"      {enumValues[i]} = {numberValuesSet[i]},");
                    }
                    else
                    {
                        sw.WriteLine($"      {enumValues[i]} = {(i + 1)},");
                    }
                }
                sw.WriteLine("  }");
                sw.WriteLine("}");
                sw.WriteLine("");
                sw.WriteLine("////-------END OF AUTOGENERATED FILE - DO NOT EDIT------");
            }
            Debug.Log("Regenerated Enum " + enumName);
        }
    }

}
#endif
